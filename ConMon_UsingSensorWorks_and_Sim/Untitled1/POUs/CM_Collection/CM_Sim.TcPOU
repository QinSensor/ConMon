<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="CM_Sim" Id="{ecfd100f-fb86-46c3-af1b-8b3981ac0a13}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM CM_Sim
VAR CONSTANT
		    cInitSource			: ST_MA_MultiArray_InitPars 
							:= ( eTypeCode := eMA_TypeCode_LREAL, nDims := 2, aDimSizes := [ GVL_Const.cChannels, GVL_Const.cBufferLength]);

END_VAR
VAR
		(* Input from aBuffer to fbSource *)
	fbSource_ISO			: FB_CMA_Source :=(	stInitPars := cInitSource, 
											nOwnID := eID_SimSource, 
											aDestIDs := [eID_SimISO],
											nResultBuffers := 4);		// Initialize source buffers
	
	fbSink				: FB_CMA_Sink := (nOwnID := eID_SimSinkISO);

	fbErrHist			: FB_HRErrHist; // error monitoring	

	
	(* Classify calculated RMS values *)
	nCountResults		  : ULINT;	
	bCalculate			  : BOOL;
	nChannel              : UDINT;
	ISOClassIs_Vel        : ARRAY[1..GVL_Const.cChannels] OF E_IsoClass;
	ISOClassIs_Displ      : ARRAY[1..GVL_Const.cChannels] OF E_IsoClass;	
	
	(* Buffer variables for calculation *)
	Ch1VelRMS : LREAL;
	Ch1DisplRMS : LREAL;
	Ch2VelRMS : LREAL;
	Ch2DisplRMS : LREAL;
	
	(* output *)
	ISO_10816_Classification AT%Q* : E_IsoClass;
	
	intMachineSelected: USINT := 1;
	intElasticitySelected: USINT :=1;
	
	Ch1AccRMS: LREAL;
	Ch2AccRMS: LREAL;
END_VAR
VAR CONSTANT
	MachineDisplISOClassLimit: E_IsoClass := 3;
	MachineVelISOClassLimit: E_IsoClass := 3;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* Collect raw data and send it for calculation *)
SourceData();

(* Get results from RMS *)
SinkData();

(* Classify the data *)
Classification();
]]></ST>
    </Implementation>
    <Action Name="Classification" Id="{804b7351-3c5b-4c81-b438-e87c8fde1463}">
      <Implementation>
        <ST><![CDATA[// define class according to ISO 10816-3 based on velocity and displacement data for each measurement channel
IF bCalculate THEN
	Ch1AccRMS := GLOBAL.aSimRMSResult[1][1];
	Ch1VelRMS := GLOBAL.aSimRMSResult[1][2];
	Ch1DisplRMS := GLOBAL.aSimRMSResult[1][3];
	Ch2AccRMS := GLOBAL.aSimRMSResult[2][1];
	Ch2VelRMS := GLOBAL.aSimRMSResult[2][2];
	Ch2DisplRMS := GLOBAL.aSimRMSResult[2][3];	
	
	IF NOT lrealisnan(Ch1VelRMS) THEN 

		nCountResults := fbSink.nCntResults;
		
		// do for each channel
		FOR nChannel := 1 TO GVL_Const.cChannels DO
			
			// evaluate velocity data
			ISOClassIs_Vel[nChannel] := E_IsoClass.A;
			IF GLOBAL.aSimRMSResult[nChannel][2] > GVL_Const.cISOClassDef_Velocity[intMachineSelected,intElasticitySelected,3] THEN
				ISOClassIs_Vel[nChannel] := E_IsoClass.D;
			ELSIF GLOBAL.aSimRMSResult[nChannel][2] > GVL_Const.cISOClassDef_Velocity[intMachineSelected,intElasticitySelected,2] THEN
				ISOClassIs_Vel[nChannel] := E_IsoClass.C;
			ELSIF GLOBAL.aSimRMSResult[nChannel][2] > GVL_Const.cISOClassDef_Velocity[intMachineSelected,intElasticitySelected,1] THEN
				ISOClassIs_Vel[nChannel] := E_IsoClass.B;
			END_IF;  
			
			// evaluate displacement data
			ISOClassIs_Displ[nChannel] := E_IsoClass.A;
			IF GLOBAL.aSimRMSResult[nChannel][3] > GVL_Const.cISOClassDef_Displ[intMachineSelected,intElasticitySelected,3] THEN
				ISOClassIs_Displ[nChannel] := E_IsoClass.D;
			ELSIF GLOBAL.aSimRMSResult[nChannel][3] > GVL_Const.cISOClassDef_Displ[intMachineSelected,intElasticitySelected,2] THEN
				ISOClassIs_Displ[nChannel] := E_IsoClass.C;
			ELSIF GLOBAL.aSimRMSResult[nChannel][3] > GVL_Const.cISOClassDef_Displ[intMachineSelected,intElasticitySelected,1] THEN
				ISOClassIs_Displ[nChannel] := E_IsoClass.B;
			END_IF;	
									
		END_FOR;
		
		// according to ISO 10816-3 select worst case 		
		ISO_10816_Classification := E_IsoClass.A;
		FOR  nChannel := 1 TO GVL_Const.cChannels DO 
			IF ISOClassIs_Vel[nChannel] >  ISO_10816_Classification THEN
				ISO_10816_Classification := ISOClassIs_Vel[nChannel];
			END_IF
			IF ISOClassIs_Displ[nChannel] >  ISO_10816_Classification THEN
				ISO_10816_Classification := ISOClassIs_Displ[nChannel];
			END_IF
		END_FOR;
		
		

		
	ELSE
		// result is NaN... code here what to do. 
		
	END_IF;
	
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="SinkData" Id="{9806d045-06a3-469b-a73d-4500eafefa59}">
      <Implementation>
        <ST><![CDATA[(* Push results to sink *)
fbSink.Output2D(	pDataOut 		:= ADR(GLOBAL.aSimRMSResult), 
					nDataOutSize 	:= SIZEOF(GLOBAL.aSimRMSResult), 
					eElementType 	:= eMA_TypeCode_LREAL, 
					nWorkDim0 		:= 0,
					nWorkDim1 		:= 1,
					nElementsDim0	:= 0,
					nElementsDim1	:= 0,
					pStartIndex 	:= 0,
					nOptionPars		:= 0,
					bNewResult		=> bCalculate );
					
IF fbSink.bError THEN
	fbErrHist.AddError(bErr:=TRUE, hrErrCode:=fbSink.hrErrorCode, sErrSource:='CM_Sim.fbSink'); // error monitoring
	// ToDo: if error
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="SourceData" Id="{875ef6ad-01e8-4240-887f-7a47aa953059}">
      <Implementation>
        <ST><![CDATA[// Collection
fbSource_ISO.Input2D(pDataIn 			:= ADR(GLOBAL.aSimBuffer),
				  nDataInSize 		:= SIZEOF(GLOBAL.aSimBuffer), 
				  eElementType 		:= eMA_TypeCode_LREAL,
				  nWorkDim0			:= 0,
				  nWorkDim1			:= 1,
				  pStartIndex		:= 0,
				  nOptionPars		:= 0 ); 
				  
// Check for errors
IF fbSource_ISO.bError THEN
	fbErrHist.AddError(bErr:=TRUE, hrErrCode:=fbSource_ISO.hrErrorCode, sErrSource:='CM_Sim.SourceData.fbSource_ISO');	
END_IF]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="CM_Sim">
      <LineId Id="52" Count="7" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="CM_Sim.Classification">
      <LineId Id="2" Count="1" />
      <LineId Id="57" Count="0" />
      <LineId Id="4" Count="1" />
      <LineId Id="59" Count="0" />
      <LineId Id="6" Count="50" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="CM_Sim.SinkData">
      <LineId Id="14" Count="9" />
      <LineId Id="1" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="26" Count="2" />
      <LineId Id="25" Count="0" />
    </LineIds>
    <LineIds Name="CM_Sim.SourceData">
      <LineId Id="10" Count="0" />
      <LineId Id="2" Count="5" />
      <LineId Id="1" Count="0" />
      <LineId Id="8" Count="1" />
      <LineId Id="12" Count="1" />
      <LineId Id="11" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>