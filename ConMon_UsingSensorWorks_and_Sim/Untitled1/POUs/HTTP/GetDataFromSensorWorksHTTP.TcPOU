<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="GetDataFromSensorWorksHTTP" Id="{5496ae5d-dcb4-44fa-9523-68e953e1c446}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK GetDataFromSensorWorksHTTP
VAR_INPUT
    bSend       : BOOL;
    strRequest  : STRING; // := '/device/d5:d0:f9:30:83:d7/cache/latest'; // EXAMPLE REQUEST STRING
    bErrorReset : BOOL;
END_VAR
VAR_IN_OUT
    fbClient : FB_IotHttpClient;
END_VAR
VAR_OUTPUT
    bBusy            : BOOL;
    bError           : BOOL;
    jsonObatinedData : ST_ReceivedData;

END_VAR
VAR
    fbRequest  : FB_IotHttpRequest;
    fbJson     : FB_JsonDomParser;
    nState     : UDINT;
    RisingEdge : R_TRIG;

    bGetContentResult : BOOL;

    jsonDoc        : SJsonValue;
    jsonVal        : SJsonValue;
    sResultValue   : STRING;

    nReqCount      : UDINT;
    nResCount      : UDINT;
    nValidResCount : UDINT;
    nErrCount      : UDINT;
    sContent       : STRING(16000);

    jsonProp : SJsonValue;

    jsonDoc2        : SJsonValue;
    jsonIterator    : SJsonIterator;
    jsonIteratorEnd : SJsonIterator;
    i               : INT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[RisingEdge(CLK := bSend);

CASE nState OF
    0:
        IF RisingEdge.Q AND NOT bError THEN
			MEMSET(ADR(jsonObatinedData),0, SIZEOF(jsonObatinedData));
            IF fbRequest.SendRequest(sUri         := strRequest,
                                     fbClient     := fbClient,
                                     eRequestType := ETcIotHttpRequestType.HTTP_Get,
                                     0,
                                     0,
                                     0) THEN
                nState    := 1;
                nReqCount := nReqCount + 1;
                bBusy     := TRUE;
                bError    := FALSE;
            END_IF
        END_IF

        IF bErrorReset THEN
            nErrCount := 0;
            nReqCount := 0;
            nResCount := 0;
            bError    := FALSE;
        END_IF

    1:
        IF NOT fbRequest.bBusy THEN
            bError := TRUE;

            IF NOT fbRequest.bError THEN
                bGetContentResult := fbRequest.GetContent(pContent            := ADR(sContent),
                                                          nContentSize        := SIZEOF(sContent),
                                                          bSetNullTermination := TRUE);

                IF fbRequest.nStatusCode >= 200 AND fbRequest.nStatusCode < 300 THEN
                    jsonDoc := fbRequest.GetJsonDomContent(fbJson);

                    IF jsonDoc <> 0 THEN
                        nState         := 2;
                        nValidResCount := nValidResCount + 1;
                        bError         := FALSE;
                    END_IF

                    nResCount := nResCount + 1;
                END_IF
            END_IF

            IF bError THEN
                nErrCount := nErrCount + 1;
                bBusy     := FALSE;
                nState    := 0;
            END_IF
        END_IF

    2:

        jsonDoc2 := fbJson.ParseDocument(sContent);

        jsonProp := fbJson.FindMember(jsonDoc, 'uuid');

        IF (jsonProp <> 0) THEN
            jsonObatinedData.uuid := fbJson.GetString(jsonProp);
        END_IF

        jsonProp := fbJson.FindMember(jsonDoc, 'blename');

        IF (jsonProp <> 0) THEN
            jsonObatinedData.blename := fbJson.GetString(jsonProp);
        END_IF

        jsonProp := fbJson.FindMember(jsonDoc, 'name');

        IF (jsonProp <> 0) THEN
            jsonObatinedData.name := fbJson.GetString(jsonProp);
        END_IF

        jsonProp := fbJson.FindMember(jsonDoc, 'id');

        IF (jsonProp <> 0) THEN
            jsonObatinedData.id := fbJson.GetString(jsonProp);
        END_IF

        jsonProp := fbJson.FindMember(jsonDoc, 'time');

        IF (jsonProp <> 0) THEN
            jsonObatinedData.timestamp := fbJson.GetString(jsonProp);
        END_IF

        jsonProp := fbJson.FindMember(jsonDoc, 'rate');

        IF (jsonProp <> 0) THEN
            jsonObatinedData.rate := fbJson.GetInt(jsonProp);
        END_IF

        jsonProp := fbJson.FindMember(jsonDoc, 'trace');

        IF (jsonProp <> 0) THEN
            jsonObatinedData.trace := fbJson.GetInt(jsonProp);
        END_IF

        jsonProp := fbJson.FindMember(jsonDoc, 'count');

        IF (jsonProp <> 0) THEN
            jsonObatinedData.count := fbJson.GetInt(jsonProp);
        END_IF

        jsonProp := fbJson.FindMember(jsonDoc, 'gain');

        IF (jsonProp <> 0) THEN
            jsonObatinedData.gain := fbJson.GetInt(jsonProp);
        END_IF

        jsonProp := fbJson.FindMember(jsonDoc, 'calibration');

        IF (jsonProp <> 0) THEN
            jsonObatinedData.calibration := fbJson.GetDouble(jsonProp);
        END_IF

        jsonProp := fbJson.FindMember(jsonDoc, 'calibration_y');

        IF (jsonProp <> 0) THEN
            jsonObatinedData.calibration_y := fbJson.GetDouble(jsonProp);
        END_IF

        jsonProp := fbJson.FindMember(jsonDoc, 'calibration_z');

        IF (jsonProp <> 0) THEN
            jsonObatinedData.calibration_z := fbJson.GetDouble(jsonProp);
        END_IF

        jsonProp := fbJson.FindMember(jsonDoc, 'temperature');

        IF (jsonProp <> 0) THEN
            jsonObatinedData.temperature := fbJson.GetDouble(jsonProp);
        END_IF

        jsonProp := fbJson.FindMember(jsonDoc, 'battery');

        IF (jsonProp <> 0) THEN
            jsonObatinedData.battery := fbJson.GetDouble(jsonProp);
        END_IF

        jsonProp := fbJson.FindMember(jsonDoc, 'axes');

        IF (jsonProp <> 0) THEN
            jsonObatinedData.axes := fbJson.GetDouble(jsonProp);
        END_IF

        jsonProp := fbJson.FindMember(jsonDoc, 'mux_axis');

        IF (jsonProp <> 0) THEN
            jsonObatinedData.mux_axis := fbJson.GetDouble(jsonProp);
        END_IF

        jsonProp := fbJson.FindMember(jsonDoc, 'measure_rate');

        IF (jsonProp <> 0) THEN
            jsonObatinedData.measured_rate := fbJson.GetDouble(jsonProp);
        END_IF

        nState := 3;

    3:

        jsonProp := fbJson.FindMember(jsonDoc, 'value');

        IF (jsonProp <> 0) THEN
            jsonIterator    := fbJson.ArrayBegin(jsonProp);
            jsonIteratorEnd := fbJson.ArrayEnd(jsonProp);
            i               := 0;

            WHILE jsonIterator <> jsonIteratorEnd DO
                IF jsonProp <> 0 THEN
                    jsonObatinedData.value[i + 1] := fbJson.GetInt(jsonIterator);
                END_IF

                i            := i + 1;
                jsonIterator := fbJson.NextArray(jsonIterator);
            END_WHILE
        END_IF

        jsonProp := fbJson.FindMember(jsonDoc, 'value_y');

        IF (jsonProp <> 0) THEN
            jsonIterator    := fbJson.ArrayBegin(jsonProp);
            jsonIteratorEnd := fbJson.ArrayEnd(jsonProp);
            i               := 0;

            WHILE jsonIterator <> jsonIteratorEnd DO
                IF jsonProp <> 0 THEN
                    jsonObatinedData.value_y[i + 1] := fbJson.GetInt(jsonIterator);
                END_IF

                i            := i + 1;
                jsonIterator := fbJson.NextArray(jsonIterator);
            END_WHILE
        END_IF

        jsonProp := fbJson.FindMember(jsonDoc, 'value_z');

        IF (jsonProp <> 0) THEN
            jsonIterator    := fbJson.ArrayBegin(jsonProp);
            jsonIteratorEnd := fbJson.ArrayEnd(jsonProp);
            i               := 0;

            WHILE jsonIterator <> jsonIteratorEnd DO
                IF jsonProp <> 0 THEN
                    jsonObatinedData.value_z[i + 1] := fbJson.GetInt(jsonIterator);
                END_IF

                i            := i + 1;
                jsonIterator := fbJson.NextArray(jsonIterator);
            END_WHILE
        END_IF

        bBusy  := FALSE;
        nState := 0;

END_CASE
]]></ST>
    </Implementation>
    <LineIds Name="GetDataFromSensorWorksHTTP">
      <LineId Id="910" Count="4" />
      <LineId Id="1168" Count="0" />
      <LineId Id="915" Count="213" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>